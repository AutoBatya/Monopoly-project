openapi: 3.0.3
info:
  title: Monopoly API
  version: 0.0.1

tags:
  - name: monopoly
    description: Monopoly API

servers:
  - url: http://127.0.0.1
    description: Local Monopoly API

paths:
  /api/rooms/:
    get:
      tags:
        - monopoly
      description: 'Метод получения всех комнат'
      operationId: '2'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rooms'

  /api/rooms/{id}/:
    get:
      tags:
        - monopoly
      description: 'Метод получения комнаты по id'
      operationId: '3'
      parameters:
        - in: path
          name: id
          description: 'id комнаты'
          schema:
            type: integer
          required: true


      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: 'Возникает, когда нет комнаты с таким id'

  /api/rooms/create/:
    get:
      tags:
        - monopoly
      description: 'Создает новую комнату и возвращает ее'
      operationId: '4'
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
          description: 'Название комнаты'
        - in: query
          name: max_players
          required: false
          schema:
            type: integer
          description: 'Максимальное кол-во игроков (по-умолчанию 4)'
        - in: query
          name: starting_balance
          required: false
          schema:
            type: integer
          description: 'Стартовый баланс (по-умолчанию 0)'

      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '406':
          description: 'Возникает, когда max_players или starting_balance не число, а так же когда имя комнаты пустая строка.'
        '409':
          description: 'Возникает, когда комната с таким названием уже существует'

  /api/users/create/:
    get:
      tags:
        - monopoly
      description: 'Создает пользователя в комнате'
      operationId: '5'
      parameters:
        - in: query
          name: id_room
          required: true
          schema:
            type: integer
          description: 'id комнаты'
        - in: query
          name: username
          required: true
          schema:
            type: string
          description: 'Имя пользователя'
        - in: query
          name: balance
          required: false
          schema:
            type: integer
          description: 'Стартовый баланс (по-умолчанию равен балансу комнаты)'

      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoom'
        '406':
          description: 'Возникает, когда id_room или username не существует, а так же когда balance не число.'
        '409':
          description: 'Возникает, когда комната переполнена или пользователь с переданным username уже существует в этой комнате'
        '404':
          description: 'Когда не существует комнаты с переданным id_room'


  /api/users/{id_user}/rooms/{id_room}/:
    get:
      tags:
        - monopoly
      description: 'Метод получения пользователя по id комнаты и id пользователя'
      operationId: '6'
      parameters:
        - in: path
          name: id_user
          description: 'id пользователя'
          schema:
            type: integer
          required: true
        - in: path
          name: id_room
          description: 'id комнаты'
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Возникает, когда нет комнаты с таким id или нет пользователя с таким id'

  /api/users/rooms/{id_room}/:
    get:
      tags:
        - monopoly
      description: 'Метод получения пользователей по id комнаты '
      operationId: '7'
      parameters:
        - in: path
          name: id_room
          description: 'id комнаты'
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoom'
        '404':
          description: 'Возникает, когда нет игроков в комнате'

  /api/users/send/:
    get:
      tags:
        - monopoly
      description: 'Метод перевода денег игроку'
      operationId: '8'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '406':
          description: 'У отправителя недостаточно средств, отправителей/получателей больше одного, отправителя/получателя не существует или введено не число'
        '409':
          description: 'Отправитель и получатель совпадают'
          
  /api/users/count/:
    get:
      tags:
        - monopoly
      description: 'Метод получения кол-во игроков в комнате.'
      operationId: 'users-count'
      parameters:
        - in: query
          name: room_id
          required: true
          schema:
            type: integer
          description: 'id комнаты.'
      responses:
        '200':
          description: 'Возвращает кол-во игроков в комнате.'
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: 'Появляется, когда комната с id_room не найдена.'
        '406':
          description: 'Появляется, когда id_room не число или отсутствует.'
      
          

components:
  schemas:
    Room:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        max_players:
          type: integer
        current_players:
          type: integer
        starting_balance:
          type: integer
        creation_datetime:
          type: string
          format: date-time

    Rooms:
      type: array
      items:
          $ref: '#/components/schemas/Room'

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        balance:
          type: integer
        creation_datetime:
          type: string
          format: date-time

    UserRoom:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        room:
          $ref: '#/components/schemas/Room'
        creation_datetime:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        creation_datetime:
          type: string
          format: date-time
        money:
          type: integer
        users:
          type: array
          items:
              $ref: '#/components/schemas/User'


    